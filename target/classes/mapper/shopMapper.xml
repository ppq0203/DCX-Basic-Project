<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.shop.mapper.ShopMapper">	<!-- xml파일을 사용할 mapper가 있는 경로 -->
  
	<!-- <select> 태그를 이용하여 select 쿼리임을 나타냄. 앞서 mapper에서 말했던 메소드의 이름은 select 쿼리의 id값과 같아야함. -->
	<select id="select" resultType="int">	
			SELECT 1
			FROM
				dual
	</select>
	<select id="selectBoardList" resultType="BoardDto">	<!-- application.properties에서 type alias를 잡은 경우 Dto클래스만 적어도 됨 -->
		<![CDATA[
			SELECT
				board_idx, title, hit_cnt, TO_DATE(created_datetime , 'YYYY-MM-DD HH24:MI') AS created_datetime
			FROM
				t_board
			WHERE
				deleted_yn = 'N'
			ORDER BY board_idx DESC
		]]>
	</select>
	
	<!-- html input 태그에서 name='title' 부분. 마이바티스에서는 #{변수명} 형식으로 전달된 데이터를 사용함. -->
	<insert id="insertBoard" parameterType="BoardDto">
		<![CDATA[
			INSERT INTO t_board
			(
				board_idx, title, contents, created_datetime, creator_id
			)
			VALUES
			(
				board_idx_seq.NEXTVAL,
				#{title},
				#{contents},
				SYSDATE,
				#{creatorId}
			)
		]]>
	</insert>
	
	<!-- 회원가입 쿼리문 -->
	<insert id="insertUser" parameterType="UserDto">
		<![CDATA[
			INSERT INTO Users
			(
				user_no, user_id, user_pw, user_name, user_email, user_phone, user_address, access_rights
			)
			VALUES
			(
				users_seq.NEXTVAL,
				#{userId},
				#{userPw},
				#{userName},
				#{userEmail},
				#{userPhone},
				#{userAddress},
				'user'
			)
		]]>
	</insert>
	
	<!-- 유저정보 변경 쿼리문 -->
	<update id="changeUser" parameterType="UserDto">
		<![CDATA[
			UPDATE Users 
			SET (user_name, user_email, user_phone, user_address, access_rights)
			 = (SELECT NVL(#{userName}, user_name), 
			 	NVL(#{userEmail}, user_email), 
			 	NVL(#{userPhone}, user_phone), 
			 	NVL(#{userAddress}, user_address),
			 	NVL(#{accessRights}, access_rights) FROM Users WHERE user_no = #{userNo})
			WHERE user_no = #{userNo}
		]]>
	</update>
	
	<!-- 비밀번호 변경 쿼리문 -->
	<update id="changePw" parameterType="UserDto">
		<![CDATA[
			UPDATE Users 
			SET user_pw = #{userPw} 
			WHERE user_no = #{userNo}
		]]>
	</update>
	
	<!-- 유저 제거 쿼리문 -->
	<delete id="deleteUser" parameterType="UserDto">
		<![CDATA[ 
			DELETE FROM Users 
			WHERE user_no = #{userNo}
		]]>
	</delete>
	
	<!-- 유저 찾기 쿼리문 -->
	<select id="findUser" resultType="UserDto">
		SELECT * FROM Users 
		WHERE user_no = #{userNo}
		<if test = "userId != null">
			OR user_id = #{userId}
		</if>
		<if test = "userEmail != null">
			OR user_email = #{userEmail}
		</if>
	</select>
	
	<!-- 상품 등록 쿼리문 -->
	<insert id="insertProduct" parameterType="SalesDto">
		INSERT ALL
		INTO product(product_no, product_name, product_category)
		values(prod_seq.NEXTVAL, #{productName}, #{productCategory})
		INTO Sales(sales_no, sales_price, sales_img, sales_title, sales_content, sales_count, user_no, product_no)
		values(sales_seq.NEXTVAL,
			#{salesPrice}, 
			#{salesImg}, 
			#{salesTitle}, 
			#{salesContent}, 
			#{salesCount},
			(SELECT user_no FROM users WHERE user_id = '3e'), 
			prod_seq.CURRVAL)
		SELECT * FROM dual
	</insert>
	
	<!-- 상품 찾기 쿼리문 -->
	<select id="findAllProd" resultType="SalesDto">
		SELECT * FROM Sales 
		LEFT OUTER JOIN
		product ON sales.product_no = product.product_no
	</select>
	
	<!-- 리뷰 작성 쿼리문 -->
	<insert id="insertReview" parameterType="ReviewDto">
		INSERT INTO Review(user_no, sales_no, review_title, review_content, review_score)
		VALUES(
			9,
			6,
			#{reviewTitle},
			#{reviewContent},
			#{reviewScore})
	</insert>
	
	<!-- 리뷰 리스트 데이터 조회 쿼리문 -->
	<select id="findReviewList" resultType="ReviewDto">
		SELECT * FROM Review
		LEFT OUTER JOIN
		users ON Review.user_no = users.user_no 
		JOIN
		sales ON Review.sales_no = sales.sales_no
	</select>
	
	<!-- 문의 작성 쿼리문 -->
	<insert id="insertCustomer" parameterType="CustomerServiceDto">
		INSERT INTO customer_service(service_title, service_content, writer, receiver)
		VALUES(
			#{serviceTitle},
			#{serviceContent},
			14,
			3)
	</insert>
	
	<!-- 문의 리스트 -->
	<select id="findCustomerList" resultType="CustomerServiceDto">
		SELECT * FROM customer_service
		LEFT OUTER JOIN
		users ON customer_service.writer = users.user_no
	</select>
	
	<insert id="insertOrder" parameterType="OrderDto">
		INSERT INTO orders(user_no, sales_no, order_date)
		VALUES(
			8,
			5,
			(to_date(SYSDATE,'YYYY-MM-DD HH24:mi:SS')))
	</insert>
</mapper>